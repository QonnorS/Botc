--[[
Character Tool
Made by Sionar
--]]


------------------Constants
VERSION = '1.9.1'
PLAYER_DIST = {{0,0,0,1},{1,0,0,1},{2,0,0,1},{3,0,0,1},{3,0,1,1},{3,1,1,1},{5,0,1,1},{5,1,1,1},{5,2,1,1},{7,0,2,1},{7,1,2,1},{7,2,2,1},{9,0,3,1},{9,1,3,1},{9,2,3,1},{9,2,3,1},{9,2,3,1},{9,2,3,1},{9,2,3,1},{9,2,3,1}} --layout: player count = {townsfolk, outsiders, minions, demons}
COLORS_BBC = {Townsfolk = '[1E87FF]', Outsider = '[20B09A]', Minion = '[F3631C]', Demon = '[DA1917]', Traveler = '[30B22A]'}
BUTTON_Y = 0.1
Z_START = -7
Z_INC = 0.44
DEFAULT_CUSTOM_IMAGE_URL = 'http://cloud-3.steamusercontent.com/ugc/794260766603642376/C9EF974279D8B421F1784592C5C7D444AD283EFE/'

#include GUIDs.ttslua

------------------Variables
mode = 'TB'
numPlayers = ''
numTrav = 0
menu = 'start'
dist = {}
characters = {}
unused = {}
selected = {}
lock = {}
found = {}
saveLoadPage = 1
saveFile = {}
saveCategoryName = {}
for i = 1,100 do
    saveFile[i] = {name = 'Save' .. i, charList = {}, imageUrl = ''}
end
for i = 1,10 do
    saveCategoryName[i] = 'Page ' .. i
end

batchList = {}
imageLoaded = false
imageValid = false
customImageUrl = ''


------------------Functions
function onLoad(saveString)
    if not (saveString == '') then
        local save = JSON.decode(saveString)
        characters = save['c']
        saveFile = save['s']
        saveCategoryName = save['sc']
        saveLoadPage = save['p']
    end
    moveBoard()
    startMenu()
    TABLE_OFFSET = Global.getVar('TABLE_OFFSET')
    self.setDescription('v ' .. VERSION .. '\nMade by Sionar')
end

function onSave()
    local save = {}
    save['c'] = characters
    save['s'] = saveFile
    save['sc'] = saveCategoryName
    save['p'] = saveLoadPage
    local saveString = JSON.encode(save)
    return saveString
end

function moveBoard()
    local modName = Global.getVar('MOD_NAME')
    local TABLE_OFFSET, STORYTELLER_TABLE_DIST
    if modName == 'Blood on the Clocktower' then
        local allObjects = getAllObjects()
        local count = 0
        for k,v in pairs(allObjects) do
            if v.getName() == 'Character Tool' then
                count = count + 1
            end
        end
        if count > 1 then
            return
        end

        TABLE_OFFSET = Global.getVar('TABLE_OFFSET')
        STORYTELLER_TABLE_DIST = Global.getVar('STORYTELLER_TABLE_DIST')
        self.setPositionSmooth({0,1.2,TABLE_OFFSET + STORYTELLER_TABLE_DIST + 8})
        self.setRotationSmooth({0,0,0})
        self.setLock(true)
    end
end

function nullFunc() end

function unusedRemove(clickedObject, playerColor, index)
    if playerColor ~= 'Black' then
        return
    end
    local char = unused[index]
    table.remove(unused, index)
    table.insert(selected, char)
    refreshUI()
end

for k = 1,40 do
    _G['unusedRemove' .. k] = function(obj, col)
        unusedRemove(obj, col, k)
    end
end

function selectedRemove(clickedObject, playerColor, index)
    if playerColor ~= 'Black' then
        return
    end
    local char = selected[index]
    table.remove(selected, index)
    table.insert(unused, char)
    lock[char] = false
    refreshUI()
end

for k = 1,40 do
    _G['selectedRemove' .. k] = function(obj, col)
        selectedRemove(obj, col, k)
    end
end

function toggleLock(clickedObject, playerColor, index)
    if playerColor ~= 'Black' then
        return
    end

    if lock[selected[index]] == nil then
        lock[selected[index]] = true
    elseif lock[selected[index]] == false then
        lock[selected[index]] = true
    elseif lock[selected[index]] == true then
        lock[selected[index]] = false
    end
    refreshUI()
end

for k = 1,40 do
    _G['toggleLock' .. k] = function(obj, col)
        toggleLock(obj, col, k)
    end
end

function label(input)
    return COLORS_BBC[CHARACTERS[input].Type] .. string.gsub(input, '_', ' ')
end

function modeTB(clickedObject, playerColor)
    if playerColor ~= 'Black' then
        return
    end
    setMode(1)
end

function modeBM(clickedObject, playerColor)
    if playerColor ~= 'Black' then
        return
    end
    setMode(2)
end

function modeSV(clickedObject, playerColor)
    if playerColor ~= 'Black' then
        return
    end
    setMode(3)
end

function modeCU(clickedObject, playerColor)
    if playerColor ~= 'Black' then
        return
    end
    setMode(4)
end

function setMode(state)
    local objs = getAllObjects()
    local name

    if state == 1 then
        mode = 'TB'
        name = 'Trouble Brewing'
        characters = TB_LIST
    elseif state == 2 then
        mode = 'BM'
        name = 'Bad Moon Rising'
        characters = BM_LIST
    elseif state == 3 then
        mode = 'SV'
        name = 'Sects & Violets'
        characters = SV_LIST
    elseif state == 4 then
        mode = 'CU'
        name = 'Custom'
        characters = {}
    end
    if mode ~= 'CU' then
        spawnSet(characters, name)
    else
        spawnSet(CU_LIST, name)
    end
    unused = {}
    for k,v in pairs(characters) do
        table.insert(unused, v)
    end
    selected = {}
    lock = {}

    Global.setVar('mode', mode)
    for k,v in pairs(objs) do
        if string.match(v.getName(), ': Characters')
        or string.match(v.getName(), ': Night Sheet') then
            if v.getStateId() ~= state then
                v.setState(state)
            end
        end
    end
    Global.call('showExtensionUI')
    refreshUI()
end

function random(clickedObject, playerColor)
    local players
    local unusedChars = {Townsfolk = {}, Outsider = {}, Minion = {}, Demon = {}, Traveler = {}}
    local lockedChars = {Townsfolk = {}, Outsider = {}, Minion = {}, Demon = {}, Traveler = {}}
    local rand, currentChar, travDist, count

    if playerColor ~= 'Black' and not debug then
        return
    end

    if numPlayers == '' then
        numPlayers = Global.call('getNumPlayers')
        if numPlayers <= 1 then
            numPlayers = 5
        end
    end

    unused = {}

    for k,v in pairs(characters) do
        table.insert(unused, v)
    end

    if #selected ~= 0 then
        for i = #selected, 1, -1 do
            if lock[selected[i]] then
                for k1,v1 in pairs(unused) do
                    if selected[i] == v1 then
                        table.remove(unused, k1)
                    end
                end
            else
                table.remove(selected,i)
            end
        end
    end

    for k,v in pairs(unused) do
        table.insert(unusedChars[CHARACTERS[v].Type], v)
    end

    for k,v in pairs(unusedChars) do
        shuffleTable(v)
    end

    for k,v in pairs(selected) do
        table.insert(lockedChars[CHARACTERS[v].Type], v)
    end

    dist = {}
    for k,v in pairs(PLAYER_DIST[numPlayers]) do
        table.insert(dist,v)
    end

    for i = 1,4 do
        dist[i] = dist[i] - #lockedChars[TYPES[i]]
    end

    travDist = numTrav - #lockedChars['Traveler']

    if dist[4] < 0 then
        Player['Black'].print('Error: Too many Demons are locked.', {1,0,0})
        refreshUI()
        return
    elseif dist[3] < 0 then
        Player['Black'].print('Error: Too many Minions are locked.', {1,0,0})
        refreshUI()
        return
    elseif #lockedChars['Outsider'] > PLAYER_DIST[numPlayers][2] then
        Player['Black'].print('Error: Too many Outsiders are locked.', {1,0,0})
        refreshUI()
        return
    elseif #lockedChars['Outsider'] == PLAYER_DIST[numPlayers][2] and #lockedChars['Outsider'] ~= 0 and lockedChars['Demon'][1] == 'Vigormortis' then
        Player['Black'].print('Error: Too many Outsiders are locked.', {1,0,0})
        refreshUI()
        return
    elseif dist[1] < 0 then
        Player['Black'].print('Error: Too many Townsfolk are locked.', {1,0,0})
        refreshUI()
        return
    elseif travDist < 0 then
        Player['Black'].print('Error: Too many Travelers are locked.', {1,0,0})
        refreshUI()
        return
    end

    for k,v in pairs(lockedChars['Demon']) do
        adjustOutsiders(v)
    end

    for k,v in pairs(lockedChars['Minion']) do
        adjustOutsiders(v)
    end

    for k,v in pairs(lockedChars['Townsfolk']) do
        adjustOutsiders(v)
    end

    count = 1
    for i = 1, dist[4] do
        while not checkValid(unusedChars.Demon[i], #lockedChars['Outsider']) do
            i = i + 1
            if i > #unusedChars.Demon then
                Player['Black'].print('Error: Invalid setup.', {1,0,0})
                refreshUI()
                return
            end
        end
        currentChar = unusedChars.Demon[i]
        table.insert(selected, currentChar)
        for k,v in pairs(unused) do
            if v == currentChar then
                table.remove(unused,k)
            end
        end
        adjustOutsiders(currentChar)
    end

    for i = 1, dist[3] do
        while not checkValid(unusedChars.Minion[count], #lockedChars['Outsider']) do
            i = i + 1
            if i > #unusedChars.Minion then
                Player['Black'].print('Error: Invalid setup.', {1,0,0})
                refreshUI()
                return
            end
        end
        currentChar = unusedChars.Minion[i]
        table.insert(selected, currentChar)
        for k,v in pairs(unused) do
            if v == currentChar then
                table.remove(unused,k)
            end
        end
        adjustOutsiders(currentChar)
    end
    local townIdx = 1
    while dist[1] > 0 do
        currentChar = unusedChars.Townsfolk[townIdx]
        if currentChar == 'Balloonist' or currentChar == 'Chieftain' and dist[1] == 1 then
            townIdx = townIdx + 1
            currentChar = unusedChars.Townsfolk[townIdx]
        end
        table.insert(selected, currentChar)
        for k,v in pairs(unused) do
            if v == currentChar then
                table.remove(unused,k)
            end
        end
        dist[1] = dist[1] - 1
        townIdx = townIdx + 1
        adjustOutsiders(currentChar)
    end
    for i = 1, dist[2] do
        currentChar = unusedChars.Outsider[i]
        table.insert(selected, currentChar)
        for k,v in pairs(unused) do
            if v == currentChar then
                table.remove(unused,k)
            end
        end
    end

    for i = 1, travDist do
        currentChar = unusedChars.Traveler[i]
        table.insert(selected, currentChar)
        for k,v in pairs(unused) do
            if v == currentChar then
                table.remove(unused,k)
            end
        end
    end

    refreshUI()
end

function start(clickedObject, playerColor)
	if playerColor ~= 'Black' and not debug then
		return
	end

    if #selected == 0 then
        Player[playerColor].print('Error: No characters have been selected.')
        return
    end

    if mode == 'CU' then
        updateCustomDecalUI()
        editCustomNotebookTab()
        import()
    else
        dealChars()
    end
end

function dealChars()
    local bags = {}
    local dealBagPos
	local takeObj
    local bagObjs
    local name, foundIndex
    local objs = getAllObjects()
    local storageBag = getObjectFromGUID(STORAGE_BAG_GUID)

    bags.deal = getObjectFromGUID(DEAL_BAG_GUID)
    if bags.deal == nil then
        printToColor('ERROR: Deal bag not found.', 'Black', {1,0,0})
        return
    end
    dealBagPos = bags.deal.getPosition()
    dealBagPos['y'] = dealBagPos['y'] + 6

    for k,v in pairs(objs) do
        if string.match(v.getName(), ': Demons') then
            bags.Demon = v
        elseif string.match(v.getName(), ': Minions') then
            bags.Minion = v
        elseif string.match(v.getName(), ': Outsiders') then
            bags.Outsider = v
        elseif string.match(v.getName(), ': Townsfolk') then
            bags.Townsfolk = v
        elseif string.match(v.getName(), ': Travelers') then
            bags.Traveler = v
        end
    end

    for k,v in pairs(selected) do
        name = string.gsub(v, '_', ' ')
        foundIndex = nil
        bagObjs = bags[CHARACTERS[v].Type].getObjects()
        for k1, v1 in pairs(bagObjs) do
            if v1.name == name then
                foundIndex = v1.index
                break
            end
        end
        if foundIndex ~= nil then
            takeObj = bags[CHARACTERS[v].Type].takeObject({position = dealBagPos, index = foundIndex})
            bags.deal.putObject(takeObj)
        end
    end

    Wait.time(function() bags.deal.shuffle() end, 0.5)
    self.clearButtons()
    storageBag.putObject(self)
end

function import()
    local objs = getAllObjects()
    local storageBag = getObjectFromGUID(STORAGE_BAG_GUID)
    local reminderBagJSON

    Global.setVar('customSet', true)
    Global.setTable('customList', characters)
    if not imageLoaded then
        Global.call('drawAllCharSheets')
    end

    spawnSet(characters, 'Custom')
    Wait.time(dealChars, 1)
end

function checkValid(char, numLockedOutsiders)
    if char == 'Fang_Gu' or char == 'Godfather' or char == 'Balloonist' or char == 'Chieftain' or char == 'Eclipse' then
        if dist[1] == 0 then
            return false
        end
    elseif char == 'Vigormortis' then
        if numLockedOutsiders > 0 and dist[2] <= 0 then
            return false
        end
    elseif char == 'Baron' or char == 'Conspirator' then
        if dist[1] <= 1 then
            return false
        end
    end
    return true
end

function adjustOutsiders(char)
    if char == 'Fang_Gu' or char == 'Godfather' or char == 'Balloonist' or char == 'Chieftain' or char == 'Eclipse' then
        dist[2] = dist[2] + 1
        dist[1] = dist[1] - 1
	elseif char == 'Vigormortis' then
        if dist[2] ~= 0 then
    		dist[2] = dist[2] - 1
    		dist[1] = dist[1] + 1
        end
    elseif char == 'Baron' or char == 'Conspirator' or char == 'Mutineer' then
        dist[2] = dist[2] + 2
        dist[1] = dist[1] - 2
    elseif char == 'Iscar' then
        dist[3] = dist[3] - 1
        dist[1] = dist[1] + 1
    end
end

function shuffleTable(tab)
    local rand
    if tab == nil then
        return nil
    end

    for i = #tab, 1, -1 do
        rand = math.random(1,i)
        tab[i], tab[rand] = tab[rand], tab[i]
    end
    return tab
end

function charInput(obj, color, input, stillEditing)
    if not stillEditing then
        local found = false
        for k,v in pairs(CHARACTERS) do
            if string.lower(k) == string.lower(input) and input ~= '' then
                charAdd = k
                found = true
                break
            end
        end
        if found then
            refreshUI()
            return 1
        end
        for k,v in pairs(CHARACTERS) do
            if string.match(string.lower(k), string.lower(input)) and input ~= '' then
                charAdd = k
                break
            end
        end
        refreshUI()
        return 1
    end
end

function removeChar()
    if charAdd == '' then
        return
    end
    for k,v in pairs(characters) do
        if v == charAdd then
            table.remove(characters, k)
        end
    end
    unused = {}
    for k,v in pairs(characters) do
        table.insert(unused, v)
    end
    selected = {}
    lock = {}
    refreshUI()
end

function addChar()
    if charAdd == '' then
        return
    end
    for k,v in pairs(characters) do
        if v == charAdd then
            return
        end
    end
    table.insert(characters, charAdd)
    unused = {}
    selected = {}
    for k,v in pairs(characters) do
        table.insert(unused, v)
    end
    lock = {}
    sortChars()
    refreshUI()
end

function sortChars()
    local newCharList = {}
    for k,v in pairs(TYPES) do
        for k1,v1 in pairs(characters) do
            if CHARACTERS[v1].Type == v then
                table.insert(newCharList, v1)
            end
        end
    end
    characters = newCharList
end

function clear()
    characters = {}
    unused = {}
    selected = {}
    lock = {}
    refreshUI()
end

function numPlayersInput(obj, color, input, stillEditing)
    if not stillEditing then
        numPlayers = tonumber(input)
        if numPlayers == nil then
            numPlayers = 5
        elseif numPlayers > 15 then
            numPlayers = 15
        elseif numPlayers < 5 then
            numPlayers = 5
        end

        refreshUI()
        return 1
    end
end

function numTravInput(obj, color, input, stillEditing)
    if not stillEditing then
        numTrav = tonumber(input)
        if numTrav == nil then
            numTrav = 0
        elseif numTrav > 5 then
            numTrav = 5
        elseif numTrav < 0 then
            numTrav = 0
        end
        refreshUI()
        return 1
    end
end

function batchImportMenu()
    menu = 'batchimport'
    self.clearButtons()
    self.clearInputs()
    self.createInput({
        input_function = 'updateBatchList',
        function_owner = self,
        label = 'Import a bunch of characters at once.\nOne character per line, no commas.\nYou do not need to type in the full name.\nFor example, you can enter math for Mathematician.\nYou can also paste the JSON from the official BotC script tool and click Load.',
        width = 4000,
        height = 6000,
        font_size = 200,
        color = {0.2,0.2,0.2},
        font_color = {1,1,1},
        alignment = 3,
    })
    self.createButton({
        click_function = 'nullFunc',
        function_owner = self,
        label = 'Batch Import',
        position = {0,BUTTON_Y,-7.5},
        width = 0,
        height = 0,
        font_size = 400,
        color = {1,1,1,1},
        font_color = {1,1,1},
    })

    self.createButton({
        click_function = 'batchImport',
        function_owner = self,
        label = 'Load',
        position = {-2,BUTTON_Y,7.5},
        width = 1300,
        height = 500,
        font_size = 400,
        color = {1,1,1,1},
        font_color = {0,0,0},
    })

    self.createButton({
        click_function = 'refreshUI',
        function_owner = self,
        label = 'Cancel',
        position = {2,BUTTON_Y,7.5},
        width = 1300,
        height = 500,
        font_size = 400,
        color = {1,1,1,1},
        font_color = {0,0,0},
    })
end

function updateBatchList(obj, color, input, stillEditing)
    if not stillEditing then
        batchList = {}
        local entry, jsonInput
        if string.sub(input, 1, 1) == '[' then
            jsonInput = JSON.decode(input)
            for i,v in ipairs(jsonInput) do
                table.insert(batchList, v.id)
            end
        else
            for s in input:gmatch("[^\r\n]+") do
                entry = string.gsub(s,' ', '_')
                table.insert(batchList, entry)
            end
        end
    end
end

function batchImport()
    characters = {}
    local match

    for k,v in pairs(batchList) do
        match = getKey(CHARACTERS, v)
        if match then
            table.insert(characters,match)
        end
    end
    unused = {}
    selected = {}
    for k,v in pairs(characters) do
        table.insert(unused, v)
    end
    lock = {}
    sortChars()
    refreshUI()
end

function getKey(table, value)
    for k,v in pairs(table) do
        if string.lower(k) == string.lower(value) and value ~= '' then
            return k
        end
    end
    for k,v in pairs(table) do

        if string.match(string.lower(k), string.lower(value)) and value ~= '' then
            return k
        end
    end
    return false
end

function radius(rad, angle, height)
    return {rad*math.sin(angle*math.pi/180), height, rad*math.cos(angle*math.pi/180)}
end

function updateCustomDecalUI()
    local xml = UI.getXmlTable()
    local entry
    local sortedChars = {}

    for k,v in pairs(TYPES) do
        for k1,v1 in pairs(characters) do
            if CHARACTERS[v1].Type == v then
                table.insert(sortedChars, v1)
            end
        end
    end

    for k,v in pairs(xml) do
        if v.attributes.id == 'placeDecalCU' then
            v.children[2].children = {}
            v.children[2].children[1] = {tag = 'Option', value = 'None', attributes = {selected = 'true'}, children = {}}
            for k1,v1 in pairs(sortedChars) do
                entry = {tag = 'Option', value = v1, attributes = {}, children = {}}
                table.insert(v.children[2].children, entry)
            end
        end
    end
    UI.setXmlTable(xml)
end

function editCustomNotebookTab()
    local tab = {index = 6, title = 'Custom Script Characters', color = 'Grey'}
    local text = 'Disclaimer: The custom made characters are made by fans of the game. They are not endorsed by The Pandemonium Institute.\r\n\r\n'

    for k,v in pairs(TYPES) do
        text = text .. '[i]' .. v .. '[/i]\r\n'
        for k1,v1 in pairs(characters) do
            if CHARACTERS[v1].Type == v then
                text = text .. '\r\n[b]' .. string.gsub(v1,'_',' ') .. '[/b] - ' .. CHARACTERS[v1].Description
            end
        end
        text = text .. '\r\n\n\r\n'
    end

    tab.body = text
    Notes.editNotebookTab(tab)
end

function setSaveName(obj, color, input, stillEditing, index)
    if not stillEditing then
        saveFile[index].name = input
        saveLoadMenu()
        return 1
    end
end

function save(clickedObject, playerColor, index)
    saveFile[index].charList = characters
    if imageLoaded then
        saveFile[index].imageUrl = customImageUrl
    else
        saveFile[index].imageUrl = ''
    end

    Player[playerColor].print('Current character list saved to slot ' .. index .. '.')
    saveLoadMenu()
end

function load(clickedObject, playerColor, index)
    characters = saveFile[index].charList
    if saveFile[index].imageUrl == '' then
        imageLoaded = false
        customImageUrl = DEFAULT_CUSTOM_IMAGE_URL
    else
        imageLoaded = true
        customImageUrl = saveFile[index].imageUrl
    end
    loadImage()

    Player[playerColor].print('Character list [1E87FF]' .. saveFile[index].name .. ' [-]loaded.')
    unused = {}
    selected = {}
    for k,v in pairs(characters) do
        table.insert(unused, v)
    end
    lock = {}
    refreshUI()
end

for k = 1,100 do
    _G['setSaveName' .. k] = function(obj, col, input, editing)
        setSaveName(obj, col, input, editing, k)
    end
    _G['save' .. k] = function(obj, col)
        save(obj, col, k)
    end
    _G['load' .. k] = function(obj, col)
        load(obj, col, k)
    end
end

function slPageFirst(clickedObject, playerColor)
    if playerColor ~= 'Black' then
        return
    end
    saveLoadPage = 1
    saveLoadMenu()
end

function slPagePrev(clickedObject, playerColor)
    if playerColor ~= 'Black' then
        return
    end
    saveLoadPage = saveLoadPage - 1
    if saveLoadPage == 0 then
        saveLoadPage = 1
    end
    saveLoadMenu()
end

function slPageNext(clickedObject, playerColor)
    if playerColor ~= 'Black' then
        return
    end
    saveLoadPage = saveLoadPage + 1
    if saveLoadPage == 11 then
        saveLoadPage = 10
    end
    saveLoadMenu()
end

function slPageLast(clickedObject, playerColor)
    if playerColor ~= 'Black' then
        return
    end
    saveLoadPage = 10
    saveLoadMenu()
end

function setCategoryName(obj, color, input, stillEditing, index)
    if not stillEditing then
        saveCategoryName[index] = input
        saveLoadMenu()
        return 1
    end
end

for k = 1,10 do
    _G['setCategoryName' .. k] = function(obj, col, input, editing)
        setCategoryName(obj, col, input, editing, k)
    end
end

function saveLoadMenu()
    self.clearButtons()
    self.clearInputs()
    local buttonParam, inputParam
    local z_offset = 1.3
    local z_start = -5
    local colors = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink'}
    menu = 'saveload'

    buttonParam = {click_function = 'nullFunc', label = 'Custom Scripts', color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,BUTTON_Y,-8}, rotation = {0,0,0}, width = 0, height = 0, font_size = 400}
    self.createButton(buttonParam)

    inputParam = {input_function = 'setCategoryName' .. saveLoadPage, font_color = stringColorToRGB('White'), function_owner = self, color = {0.3,0.3,0.3}, function_owner = self,
        position = {0,BUTTON_Y,-6.5}, rotation = {0,0,0}, width = 5000, height = 450, font_size = 320, value = saveCategoryName[saveLoadPage], alignment = 3, tab = 2}
    self.createInput(inputParam)

    for i = 1, 10 do
        inputParam = {input_function = 'setSaveName' .. ((saveLoadPage - 1) * 10 + i), font_color = stringColorToRGB(colors[i]), function_owner = self, color = {0.3,0.3,0.3}, function_owner = self,
            position = {-2.5,BUTTON_Y,z_start + z_offset * (i-1)}, rotation = {0,0,0}, width = 5000, height = 360, font_size = 320, value = saveFile[(saveLoadPage - 1) * 10 + i].name, alignment = 3, validation = 1, tab = 2}
        self.createInput(inputParam)

        buttonParam = {click_function = 'save' .. ((saveLoadPage - 1) * 10 + i), label = "Save", color = {1,0.6,0.6}, font_color = stringColorToRGB('White'), function_owner = self,
            position = {4.2,BUTTON_Y,z_start + z_offset * (i-1)}, rotation = {0,0,0}, width = 1000, height = 500, font_size = 320, tooltip = 'Save custom script to slot ' .. ((saveLoadPage - 1) * 10 + i)}
        self.createButton(buttonParam)

        buttonParam = {click_function = 'load' .. ((saveLoadPage - 1) * 10 + i), label = "Load", color = {0.6,0.6,1}, font_color = stringColorToRGB('White'), function_owner = self,
            position = {6.5,BUTTON_Y,z_start + z_offset * (i-1)}, rotation = {0,0,0}, width = 1000, height = 500, font_size = 320, tooltip = 'Load custom script from slot ' .. ((saveLoadPage - 1) * 10 + i)}
        self.createButton(buttonParam)
    end

    buttonParam = {click_function = 'slPageFirst', function_owner = self, label = 'First Page', position = {-7,BUTTON_Y,8}, width = 1600, height = 500, font_size = 300, color = {1,1,1,1}, font_color = {0,0,0}}
    self.createButton(buttonParam)
    buttonParam = {click_function = 'slPagePrev', function_owner = self, label = 'Prev Page', position = {-3.5,BUTTON_Y,8}, width = 1600, height = 500, font_size = 300, color = {1,1,1,1}, font_color = {0,0,0}}
    self.createButton(buttonParam)
    buttonParam = {click_function = 'refreshUI', function_owner = self, label = 'Cancel', position = {0,BUTTON_Y,8}, width = 1600, height = 500, font_size = 300, color = {1,1,1,1}, font_color = {0,0,0}}
    self.createButton(buttonParam)
    buttonParam = {click_function = 'slPageNext', function_owner = self, label = 'Next Page', position = {3.5,BUTTON_Y,8}, width = 1600, height = 500, font_size = 300, color = {1,1,1,1}, font_color = {0,0,0}}
    self.createButton(buttonParam)
    buttonParam = {click_function = 'slPageLast', function_owner = self, label = 'Last Page', position = {7,BUTTON_Y,8}, width = 1600, height = 500, font_size = 300, color = {1,1,1,1}, font_color = {0,0,0}}
    self.createButton(buttonParam)
end

function startMenu()
    menu = 'start'

    buttonParam = {click_function = 'nullFunc', label = 'Choose an Edition', color = {0,0,0,1}, font_color = {1,1,1}, function_owner = self,
        position = {0,BUTTON_Y,-7}, rotation = {0,0,0}, width = 0, height = 0, font_size = 500}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'modeTB', label = 'Trouble Brewing', color = {0.85,0.1,0.1,1}, font_color = {1,1,1}, function_owner = self,
        position = {0,BUTTON_Y,-4}, rotation = {0,0,0}, width = 4500, height = 1200, font_size = 500, tooltip = 'Start a Trouble Brewing game.'}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'modeBM', label = 'Bad Moon Rising', color = {0.85,0.73,0.09,1}, font_color = {0,0,0}, function_owner = self,
        position = {0,BUTTON_Y,-1}, rotation = {0,0,0}, width = 4500, height = 1200, font_size = 500, tooltip = 'Start a Bad Moon Rising game.'}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'modeSV', label = 'Sects & Violets', color = {0.62,0.13,0.94,1}, font_color = {1,1,1}, function_owner = self,
        position = {0,BUTTON_Y,2}, rotation = {0,0,0}, width = 4500, height = 1200, font_size = 500, tooltip = 'Start a Sects & Violets game.'}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'modeCU', label = 'Custom Game', color = {0.5,0.5,0.5,1}, font_color = {0,0,0}, function_owner = self,
        position = {0,BUTTON_Y,5}, rotation = {0,0,0}, width = 4500, height = 1200, font_size = 500, tooltip = 'Start a Custom game.'}
    self.createButton(buttonParam)
end

function loadImageMenu()
    menu = 'loadimage'
    self.clearButtons()
    self.clearInputs()
    self.createInput({
        input_function = 'updateImageUrl',
        function_owner = self,
        label = 'Type in a url for the image of your custom script. PDF files are not accepted.',
        width = 5000,
        height = 800,
        font_size = 200,
        color = {0.2,0.2,0.2},
        font_color = {1,1,1},
        alignment = 3,
    })
    self.createButton({
        click_function = 'nullFunc',
        function_owner = self,
        label = 'Load Custom Script Image',
        position = {0,BUTTON_Y,-7.5},
        width = 0,
        height = 0,
        font_size = 400,
        color = {1,1,1,1},
        font_color = {1,1,1},
    })

    self.createButton({
        click_function = 'loadImage',
        function_owner = self,
        label = 'Load\nImage',
        position = {-3,BUTTON_Y,7.5},
        width = 1600,
        height = 800,
        font_size = 300,
        color = {1,1,1,1},
        font_color = {0,0,0},
    })

    self.createButton({
        click_function = 'refreshUI',
        function_owner = self,
        label = 'Cancel',
        position = {3,BUTTON_Y,7.5},
        width = 1600,
        height = 800,
        font_size = 300,
        color = {1,1,1,1},
        font_color = {0,0,0},
    })
end

function updateImageUrl(obj, color, input, stillEditing)
    if not stillEditing then
        customImageUrl = input
    end
end

function loadImage(clickedObject,playerColor)
    if customImageUrl == '' then
        Player[playerColor].print('Error: No URL found.', {1,0,0})
        return
    end
    imageValid = false
    WebRequest.get(customImageUrl, webReqCB)
    refreshUI()
end

function webReqCB(req)
    local params, obj

    if req.is_done and not req.is_error then
        local response = req.text
        local format = string.sub(response,1,12)
        if string.match(format, 'PNG') or string.match(format, 'JFIF') or string.match(format, 'Exif') then
            params = {image = customImageUrl, thickness = 0.2, merge_distance = 25, stackable = false}
            for k,v in pairs(CHAR_SHEET_GUIDS_CU) do
                obj = getObjectFromGUID(v)
                if obj ~= nil then
                    obj.setColorTint({1,1,1})
                    obj.setCustomObject(params)
                    obj.reload()
                end
            end
            if customImageUrl == DEFAULT_CUSTOM_IMAGE_URL then
                imageLoaded = false
            else
                imageLoaded = true
            end
            Global.setVar('imageLoaded', imageLoaded)
        else
            Player['Black'].print('Error: Invalid URL. Make sure the image type is jpg or png.', {1,0,0})
        end
    else
        Player['Black'].print('Error: Invalid URL. Make sure the image type is jpg or png.', {1,0,0})
    end
end

function importLists(clickedObject, playerColor)
    local allObjs = getAllObjects()
    local otherBoard = nil


    for k,v in pairs(allObjs) do
        if v.getName() == 'Character Tool' and v.getGUID() ~= self.getGUID() then
            otherBoard = v
        end
    end

    if not otherBoard then
        Player[playerColor].print('Error: Other Character Tool not found.', {1,0,0})
        return
    end

    saveFile = otherBoard.getTable('saveFile')
    saveCategoryName = otherBoard.getTable('saveCategoryName') or {}
    Player[playerColor].print('The custom scripts from the other board have been migrated successfully.')
end

function refreshMenu()
    if menu == 'main' then
        refreshUI()
    end
end

function refreshUI()
    menu = 'main'
    local buttonParam, z
    local numSeated = 0


    local players = Global.getTable('players')
    for k,v in pairs(players) do
        if v then
            numSeated = numSeated + 1
        end
    end
    numSeated = numSeated - 1

    self.clearButtons()
    self.clearInputs()

    buttonParam = {click_function = 'nullFunc', label = 'Characters', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {-3,BUTTON_Y,-8}, rotation = {0,0,0}, width = 0, height = 0, font_size = 400,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'nullFunc', label = 'Unused', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {1.5,BUTTON_Y,-8}, rotation = {0,0,0}, width = 0, height = 0, font_size = 400,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'nullFunc', label = 'Selected', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {5.5,BUTTON_Y,-8}, rotation = {0,0,0}, width = 0, height = 0, font_size = 400,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'modeTB', label = 'Trouble Brewing', color = {0.85,0.1,0.1,1}, font_color = {1,1,1}, function_owner = self,
        position = {-7.4,BUTTON_Y,-1.5}, rotation = {0,0,0}, width = 1500, height = 400, font_size = 200, tooltip = 'Start a Trouble Brewing game.'}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'modeBM', label = 'Bad Moon Rising', color = {0.85,0.73,0.09,1}, font_color = {0,0,0}, function_owner = self,
        position = {-7.4,BUTTON_Y,-0.5}, rotation = {0,0,0}, width = 1500, height = 400, font_size = 200, tooltip = 'Start a Bad Moon Rising game.'}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'modeSV', label = 'Sects & Violets', color = {0.62,0.13,0.94,1}, font_color = {1,1,1}, function_owner = self,
        position = {-7.4,BUTTON_Y,0.5}, rotation = {0,0,0}, width = 1500, height = 400, font_size = 200, tooltip = 'Start a Sects & Violets game.'}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'modeCU', label = 'Custom Game', color = {0.5,0.5,0.5,1}, font_color = {0,0,0}, function_owner = self,
        position = {-7.4,BUTTON_Y,1.5}, rotation = {0,0,0}, width = 1500, height = 400, font_size = 200, tooltip = 'Start a Custom game.'}
    self.createButton(buttonParam)

    if mode == 'CU' then
        buttonParam = {click_function = 'saveLoadMenu', label = 'Save/Load Lists', color = {0.5,0.5,0.5,1}, font_color = {0,0,0}, function_owner = self,
            position = {-7.4,BUTTON_Y,2.5}, rotation = {0,0,0}, width = 1500, height = 400, font_size = 200, tooltip = 'Save or load your custom character list.'}
        self.createButton(buttonParam)

        buttonParam = {click_function = 'batchImportMenu', label = 'Batch Import', color = {0.5,0.5,0.5,1}, font_color = {0,0,0}, function_owner = self,
            position = {-7.4,BUTTON_Y,3.5}, rotation = {0,0,0}, width = 1500, height = 400, font_size = 200, tooltip = 'Import a bunch of characters at once.'}
        self.createButton(buttonParam)

        buttonParam = {click_function = 'clear', label = 'Clear List', color = {0.5,0.5,0.5,1}, font_color = {0,0,0}, function_owner = self,
            position = {-7.4,BUTTON_Y,4.5}, rotation = {0,0,0}, width = 1500, height = 400, font_size = 200, tooltip = 'Clear the Character list.'}
        self.createButton(buttonParam)

        buttonParam = {click_function = 'loadImageMenu', label = 'Load Image', color = {0.5,0.5,0.5,1}, font_color = {0,0,0}, function_owner = self,
            position = {-7.4,BUTTON_Y,5.5}, rotation = {0,0,0}, width = 1500, height = 400, font_size = 200, tooltip = 'Load an image from a url for your custom script.'}
        self.createButton(buttonParam)

        buttonParam = {click_function = 'importLists', label = 'Import Lists\nFrom Other Board', color = {0.5,0.5,0.5,1}, font_color = {0,0,0}, function_owner = self,
            position = {-7.4,BUTTON_Y,6.5}, rotation = {0,0,0}, width = 1500, height = 400, font_size = 150, tooltip = 'Import your custom scripts from another Character Tool.'}
        self.createButton(buttonParam)

        buttonParam = {input_function = 'charInput', position = {-3, BUTTON_Y, 7.8}, width = 1600, height = 250, font_size = 200, value = charAdd, label = 'Character', color = stringColorToRGB('White'), function_owner = self, font_color = {0,0,0}, function_owner = self, rotation = {0,0,0}, alignment = 3, validation = 1, tab = 2}
        self.createInput(buttonParam)

        buttonParam = {click_function = 'removeChar', label = 'Remove', position = {-4, BUTTON_Y, 8.5}, width = 800, height = 300, font_size = 200, color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, rotation = {0,0,0}, tooltip = 'Remove character from game'}
        self.createButton(buttonParam)

        buttonParam = {click_function = 'addChar', label = 'Add', position = {-2, BUTTON_Y, 8.5}, width = 800, height = 300, font_size = 200, color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, rotation = {0,0,0}, tooltip = 'Add character to game'}
        self.createButton(buttonParam)
    end

    buttonParam = {click_function = 'nullFunc', label = '# Players', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0.6,BUTTON_Y,7.5}, rotation = {0,0,0}, width = 0, height = 0, font_size = 150,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'nullFunc', label = '# Travelers', color = {1,1,1,1}, font_color = stringColorToRGB('Green'), function_owner = self,
        position = {2.9,BUTTON_Y,7.5}, rotation = {0,0,0}, width = 0, height = 0, font_size = 150,}
    self.createButton(buttonParam)

    buttonParam = {input_function = 'numPlayersInput', position = {0.6, BUTTON_Y, 8.2}, width = 800, height = 380, font_size = 340, value = numPlayers, label = '5', color = stringColorToRGB('White'), function_owner = self, font_color = {0,0,0}, function_owner = self, rotation = {0,0,0}, alignment = 3, validation = 2, tab = 2, tooltip = 'Number of non-travelers in the game'}
    self.createInput(buttonParam)

    buttonParam = {input_function = 'numTravInput', position = {2.9, BUTTON_Y, 8.2}, width = 800, height = 380, font_size = 340, value = numTrav, label = '0', color = stringColorToRGB('White'), function_owner = self, font_color = {0,0,0}, function_owner = self, rotation = {0,0,0}, alignment = 3, validation = 2, tab = 2, tooltip = 'Number of travelers in the game'}
    self.createInput(buttonParam)

    buttonParam = {click_function = 'random', label = 'Random', color = {1,1,1,1}, font_color = {0,0,0}, function_owner = self,
        position = {5.2,BUTTON_Y,8.2}, rotation = {0,0,0}, width = 1000, height = 400, font_size = 200, tooltip = 'Select random character tokens based on the player count.'}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'nullFunc', label = 'Players in Lobby: ' .. #Player.getPlayers() - 1, color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {6.35,BUTTON_Y,6.2}, rotation = {0,0,0}, width = 0, height = 0, font_size = 150,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'nullFunc', label = 'Players Seated: ' .. numSeated, color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {6.35,BUTTON_Y,6.8}, rotation = {0,0,0}, width = 0, height = 0, font_size = 150,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'nullFunc', label = 'Characters Selected: ' .. #selected , color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {6.35,BUTTON_Y,7.4}, rotation = {0,0,0}, width = 0, height = 0, font_size = 150,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'start', label = 'Start', color = {1,1,1,1}, font_color = {0,0,0}, function_owner = self,
        position = {7.5,BUTTON_Y,8.2}, rotation = {0,0,0}, width = 1000, height = 400, font_size = 200, tooltip = 'Put the selected character tokens into the Deal bag.'}
    self.createButton(buttonParam)

    z = Z_START
    for k,v in pairs(characters) do
        buttonParam = {click_function = 'nullFunc', label = label(v), color = {0,0,0,1}, font_color = {1,1,1}, function_owner = self,
            position = {-3,BUTTON_Y,z}, rotation = {0,0,0}, width = 0, height = 0, font_size = 200, tooltip = CHARACTERS[v].Description}
        self.createButton(buttonParam)
        z = z + Z_INC
    end

    z = Z_START
    for k,v in pairs(unused) do
        buttonParam = {click_function = 'unusedRemove' .. k, label = label(v), color = {0,0,0,1}, function_owner = self,
            position = {1.5,BUTTON_Y,z}, rotation = {0,0,0}, width = 1500, height = 250, font_size = 200,}
        self.createButton(buttonParam)
        z = z + Z_INC
    end

    z = Z_START
    for k,v in pairs(selected) do
        buttonParam = {click_function = 'selectedRemove' .. k, label = label(v), color = {0,0,0,1}, function_owner = self,
            position = {5.5,BUTTON_Y,z}, rotation = {0,0,0}, width = 1500, height = 250, font_size = 200,}
        self.createButton(buttonParam)

        buttonParam = {click_function = 'toggleLock' .. k, color = {0,0,0,1}, function_owner = self,
            position = {7.5,BUTTON_Y,z}, rotation = {0,0,0}, width = 500, height = 250, font_size = 110,}
        if lock[selected[k]] == true then
            buttonParam.label = 'Locked'
            buttonParam.font_color = {1,0,0}
            buttonParam.tooltip = 'Allow this character to be discarded from a random selection.'
        else
            buttonParam.label = 'Unlocked'
            buttonParam.font_color = {0.12,0.53,1}
            buttonParam.tooltip = 'Prevent this character from being discarded from a random selection.'
        end

        self.createButton(buttonParam)
        z = z + Z_INC
    end
end
